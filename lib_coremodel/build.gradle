apply plugin: 'com.android.library'
apply plugin: 'maven'

android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    api project(':lib_opensource')


}

uploadArchives {
    configuration = configurations.archives
    repositories {
        mavenDeployer {
            snapshotRepository(url: getsSnapshotUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }
            repository(url: getReleaseUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }
            pom.project {
                version '1.0.0'
                artifactId 'lib-coremodel'
                groupId getGroupId()
                packaging getType()
                description getDescription()
            }
        }
    }
}

artifacts {
    archives file('lib_coremodel.aar')
}

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getsSnapshotUrl() {
    return hasProperty('MAVEN_REPO_SNAPSHOT_URL') ? MAVEN_REPO_SNAPSHOT_URL : ""
}

def getReleaseUrl() {
    return hasProperty('MAVEN_REPO_RELEASE_URL') ? MAVEN_REPO_RELEASE_URL : ""
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}
def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

def getGroupId() {
    return hasProperty('GROUP_ID') ? GROUP_ID : ""
}
def getType() {
    return hasProperty('TYPE') ? TYPE : ""
}
def getDescription() {
    return hasProperty('DESCRIPTION') ? DESCRIPTION : ""
}